# BSD 2-Clause License
#
# Copyright (c) 2021, OpenSIPIt
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

log_level = 3
log_stderror = yes
log_facility = LOG_LOCAL0

memdump = 2
udp_workers = 2

auto_aliases = no

listen = udp:eth0:5081
alias = udp:opensips.opensipit.net:5081

####### Modules Section ########

mpath = "modules/"

loadmodule "signaling.so"
loadmodule "statistics.so"
loadmodule "sl.so"

loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

loadmodule "rr.so"

loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo_3")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "registrar.so"
loadmodule "usrloc.so"

loadmodule "httpd.so"
modparam("httpd", "port", 8899)
loadmodule "mi_http.so"

loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "options_ping_interval", 50)

loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

loadmodule "db_mysql.so"
loadmodule "topology_hiding.so"
loadmodule "json.so"
loadmodule "cfgutils.so"
loadmodule "nathelper.so"

route {
	if (!mf_process_maxfwd_header(10)) {
		sl_send_reply(483, "Too Many Hops");
		exit;
	}

	if (has_totag()) {
	    # handle hop-by-hop ACK (no routing required)
	    if ( is_method("ACK") && t_check_trans() ) {
	        t_relay();
	        exit;
	    }
	
	    # sequential request within a dialog should
	    # take the path determined by record-routing
	    if ( !match_dialog() ) {
	        # we do record-routing for all our traffic, so we should not
	        # receive any sequential requests without Route hdr.
	        send_reply(404,"Not here");
	        exit;
	    }
	
	    if (is_method("BYE")) {
	        # do accounting even if the transaction fails
	        do_accounting("log","failed");
	    }
	
	    # route it out to whatever destination was set by loose_route()
	    # in $du (destination URI).
	    route(relay);
	    exit;
	}

	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("[$ci] Attempt to route with preloaded Routes [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply(403, "Preloaded Route Denied");
		exit;
	}

	if (!is_method("INVITE")) {
		send_reply(405, "Method Not Allowed");
		exit;
	}

	route(TAMPER_ATTESTATION);
	#route(TAMPER_SIGNATURE);
	#route(TAMPER_MISSING_FIELDS);

	#route(ADD_ALG);

	create_dialog();
	topology_hiding();
	do_accounting("log");
	route(relay);
}

route [relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay())
		send_reply(500, "Internal Error");

	exit;
}

branch_route [per_branch_ops] {
	xlog("new branch at $ru\n");
}

onreply_route [handle_nat] {
	xlog("incoming reply\n");
	if (nat_uac_test(32))
		fix_nated_contact();
}

failure_route [missed_call] {
	if (t_was_cancelled()) {
		exit;
	}
}

route [TAMPER_MISSING_FIELDS] {
	$var(p1) = $(hdr(Identity){s.select,0,;});
	$var(p2) = $(hdr(Identity){s.select,1,;});
	$var(p3) = $(hdr(Identity){s.select,2,;});

	$var(hdr) = $(var(p1){s.select,0,.});
	$json(payload) := $(var(p1){s.select,1,.}{s.b64decode});
	$var(sig) = $(var(p1){s.select,2,.});

	xlog("XXXXXX payload: $json_compact(payload)\n");

	$json(payload) := '{"attest":"A","dest":{"tn":["2345"]},"iat":1618416909,"orig":{"tn":["2345"]},"iat":1618416909,"orig":{"tn":["2345"]},"iat":1618416909,"orig":{"tn":["30422"]},"iat":2147483649,"orig":{"tn":"1234"},"origid":"4693d9ff-d260--169112073ef9-257e97-ad1213555e37"}';

	xlog("XXXXXX new payload: $json_compact(payload)\n");

	$var(e1) = "/=//g";
	$var(e2) = "/\+/-/g";
	$var(e3) = "/\//_/g";
	$var(payload) = $(json_compact(payload){s.b64encode}{re.subst,$var(e1)});
	$var(payload) = $(var(payload){re.subst,$var(e2)});
	$var(payload) = $(var(payload){re.subst,$var(e3)});

	$var(p1) = $var(hdr) + "." + $var(payload) + "." + $var(sig);

	remove_hf("Identity");
	if ($var(p3))
		append_hf("Identity: $var(p1);$var(p2);$var(p3)\r\n");
	else if ($var(p2))
		append_hf("Identity: $var(p1);$var(p2)\r\n");
	else
		append_hf("Identity: $var(p1)\r\n");
}

route [TAMPER_ATTESTATION] {
	$var(p1) = $(hdr(Identity){s.select,0,;});
	$var(p2) = $(hdr(Identity){s.select,1,;});
	$var(p3) = $(hdr(Identity){s.select,2,;});

	$var(hdr) = $(var(p1){s.select,0,.});
	$json(payload) := $(var(p1){s.select,1,.}{s.b64decode});
	$var(sig) = $(var(p1){s.select,2,.});

	xlog("XXXXXX payload: $json_compact(payload)\n");

	# hack the attestation!
	switch ($json(payload/attest)) {
	case "A":
	case "a":
		$json(payload/attest) = "B";
		break;

	case "B":
	case "b":
		$json(payload/attest) = "A";
		break;

	case "C":
	case "c":
		$json(payload/attest) = "A";
		break;
	}

	xlog("XXXXXX new payload: $json_compact(payload)\n");

	$var(e1) = "/=//g";
	$var(e2) = "/\+/-/g";
	$var(e3) = "/\//_/g";
	$var(payload) = $(json_compact(payload){s.b64encode}{re.subst,$var(e1)});
	$var(payload) = $(var(payload){re.subst,$var(e2)});
	$var(payload) = $(var(payload){re.subst,$var(e3)});

	$var(p1) = $var(hdr) + "." + $var(payload) + "." + $var(sig);

	remove_hf("Identity");
	if ($var(p3))
		append_hf("Identity: $var(p1);$var(p2);$var(p3)\r\n");
	else if ($var(p2))
		append_hf("Identity: $var(p1);$var(p2)\r\n");
	else
		append_hf("Identity: $var(p1)\r\n");
}

route [TAMPER_SIGNATURE] {
	$var(p1) = $(hdr(Identity){s.select,0,;});
	$var(p2) = $(hdr(Identity){s.select,1,;});
	$var(p3) = $(hdr(Identity){s.select,2,;});

	$var(hdr) = $(var(p1){s.select,0,.});
	$var(payload) = $(var(p1){s.select,1,.});
	$var(sig) = $(var(p1){s.select,2,.});

	# hack 1 random byte in the signature!
	$var(sig_len) = $(var(sig){s.len});
	$var(max) = $var(sig_len) - 1;
	$var(rb) = $RANDOM % $var(sig_len);
	xlog("XXXXX selected byte $var(rb) / $var(sig_len)\n");

	$var(new_sig) = $(var(sig){s.substr,0,$var(rb)});

	if ($(var(sig){s.substr,$var(rb),1}) == "X")
		$var(new_sig) += "x";
	else
		$var(new_sig) += "X";

	if ($var(rb) < $var(max)) {
		$var(start) = $var(rb) + 1;
		$var(new_sig) += $(var(sig){s.substr,$var(start),0});
	}

	xlog("XXXXX old sig: $var(sig)\n");
	xlog("XXXXX new sig: $var(new_sig)\n");

	$var(p1) = $var(hdr) + "." + $var(payload) + "." + $var(new_sig);

	remove_hf("Identity");
	if ($var(p3))
		append_hf("Identity: $var(p1);$var(p2);$var(p3)\r\n");
	else if ($var(p2))
		append_hf("Identity: $var(p1);$var(p2)\r\n");
	else
		append_hf("Identity: $var(p1)\r\n");
}


route [ADD_ALG] {
	$var(p1) = $(hdr(Identity){s.select,0,;});
	$var(p2) = $(hdr(Identity){s.select,1,;});
	$var(p3) = $(hdr(Identity){s.select,2,;});

	remove_hf("Identity");
	if ($var(p3))
		append_hf("Identity: $var(p1);$var(p2);$var(p3);alg=ES256\r\n");
	else if ($var(p2))
		append_hf("Identity: $var(p1);$var(p2);alg=ES256\r\n");
	else
		append_hf("Identity: $var(p1);alg=ES256\r\n");
}

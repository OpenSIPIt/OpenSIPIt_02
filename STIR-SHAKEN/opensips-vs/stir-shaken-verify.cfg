# BSD 2-Clause License
#
# Copyright (c) 2021, OpenSIPIt
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

####### Global Parameters #########

log_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

udp_workers=4
tcp_workers=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no

socket = udp:eth0:5070   # CUSTOMIZE ME
socket = tcp:eth0:5070   # CUSTOMIZE ME

####### Modules Section ########

#set module path
mpath="modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/var/run/opensips/opensips_fifo_vs")
modparam("mi_fifo", "fifo_mode", 0666)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

loadmodule "nathelper.so"
modparam("nathelper|registrar", "received_avp", "$avp(rcv)")
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "sipping_bflag", "NAT")
modparam("nathelper", "sipping_from", "sip:astricon-2019@term-sbc.com")

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "dialog.so"
loadmodule "topology_hiding.so"

loadmodule "stir_shaken.so"
modparam("stir_shaken", "ca_list", "/var/tmp/stir-shaken/sti-ca/ca-cert.pem")
#modparam("stir_shaken", "ca_dir", "/var/tmp/stir-shaken/ca-dir")
loadmodule "tls_mgm.so"
loadmodule "tls_openssl.so"

loadmodule "rest_client.so"
loadmodule "cachedb_local.so"
modparam("rest_client", "curl_timeout", 1)
modparam("rest_client", "connection_timeout", 1)
modparam("rest_client", "max_transfer_size", 64)
modparam("cachedb_local", "cachedb_url", "local://")

####### Routing Logic ########

# main request routing logic

route{
	if ($si != "81.196.141.7" && $si !~ "^(127|172)") {
		xlog("[$ci] dropping unrecognized $rm from $si:$sp\n");
		drop;
	}

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !match_dialog() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	if (is_method("REGISTER")) {
		if (!save("location"))
			sl_reply_error();
		exit;
	}

	# record routing
	if (!is_method("INVITE")) {
		send_reply(501, "Not Implemented");
		exit;
	}

	xlog("[$ci] INVITE from UA $ua, $si:$sp\n");

	if (!$hdr(Identity)) {
		xlog("[$ci] missing Identity header\n");
		send_reply(428, "Use Identity Header");
		exit;
	}

	if (!$identity(x5u)) {
		xlog("[$ci] missing x5u URL\n");
		send_reply(438, "Invalid Identity Header (Missing x5u)");
		exit;
	}

	if ($identity(x5u) !~ "^https?://") {
		xlog("[$ci] bad x5u URL\n");
		send_reply(438, "Invalid Identity Header (x5u Scheme)");
		exit;
	}

	if (!cache_fetch("local", $identity(x5u), $var(cert))) {
		xlog("[$ci] fetching SP cert via HTTP...\n");

		$var(rc) = rest_get($identity(x5u), $var(cert), , $var(http_rc));
		if ($var(rc) == -10) {
			xlog("[$ci] certificate download aborted (file too large)\n");
			send_reply(438, "Invalid Identity Header (Cert Too Big)");
			exit;
		}

		if ($var(rc) < 0 || $var(http_rc) != 200) {
			xlog("[$ci] failed to fetch SP certificate (rc: $var(rc))\n");
			send_reply(400, "x5u URL Is Dead");
			exit;
		}

		cache_store("local", $identity(x5u), $var(cert), 30);
	} else {
		xlog("[$ci] found cert '$identity(x5u)' in cache!\n");
	}

	create_dialog();
	topology_hiding();
	do_accounting("log");

	xlog("[$ci] -------------------------------------\n");
	xlog("[$ci] PASSport.header: $identity(header)\n");
	xlog("[$ci] PASSport.x5u: $identity(x5u)\n");
	xlog("[$ci] -------------------------------------\n");
	xlog("[$ci] PASSport.payload: $identity(payload)\n");
	xlog("[$ci] PASSport.attest: $identity(attest)\n");
	xlog("[$ci] PASSport.origid: $identity(origid)\n");
	xlog("[$ci] PASSport.orig: $identity(orig)\n");
	xlog("[$ci] PASSport.dest: $identity(dest)\n");
	xlog("[$ci] PASSport.iat: $identity(iat)\n");
	xlog("[$ci] -------------------------------------\n");

	$var(code) = NULL;
	$var(reason) = NULL;
	$var(rc) = stir_shaken_verify($var(cert), $var(code), $var(reason));
	if ($var(rc) < 0) {
		xlog("[$ci] stir_shaken_verify() failed: $var(rc), $var(code), $var(reason)\n");
		send_reply($var(code), $var(reason));
		exit;
	}
	xlog("[$ci] stir_shaken_verify() successful: $var(rc), $var(code), $var(reason)\n");

	sl_send_reply(486, "SUCCESSFUL VERIFY");
	exit;
	###############################

	# local sipp UAS
	sethostport("opensips.opensipit.net:7050");

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
	fix_nated_contact();
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}
}

route [TRUSTED_CERT] {
	$var(cert) = "-----BEGIN CERTIFICATE-----
MIIByzCCAXGgAwIBAgIUXDt6EC0OixT1iRSSPV3jB/zQAlYwCgYIKoZIzj0EAwIw
RTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMTA0MTMwNjM3NTBaFw0yMzA3MTcw
NjM3NTBaMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJWQTESMBAGA1UEBwwJU29t
ZXdoZXJlMRowGAYDVQQKDBFBY21lVGVsZWNvbSwgSW5jLjENMAsGA1UECwwEVk9J
UDEPMA0GA1UEAwwGU0hBS0VOMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6d6M
01nUoOV+S35u/z3+lvrjOew+vvMmOc2zG5a7agY7ThmPD3qtFpiU0QysKYiXCfcf
jzEajMzY8mf3R++rraMaMBgwFgYIKwYBBQUHARoECjAIoAYWBDEwMDQwCgYIKoZI
zj0EAwIDSAAwRQIhAKNB2u441FsU4oUarnlrmGDED645GAMUatZ8iHTJmfueAiBd
het8flEquv8RIwotTCbGlN8nq3V+Rr6oVeeIi2bZ1g==
-----END CERTIFICATE-----";
}

route [EXPIRED_CERT] {
	$var(cert) = "-----BEGIN CERTIFICATE-----
MIIBzDCCAXGgAwIBAgIUVE3Rsda/WIXDxnUlSq2hfueiSsswCgYIKoZIzj0EAwIw
RTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0xOTAxMDEwMDEwMzRaFw0yMTA0MDUw
MDEwMzRaMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJWQTESMBAGA1UEBwwJU29t
ZXdoZXJlMRowGAYDVQQKDBFBY21lVGVsZWNvbSwgSW5jLjENMAsGA1UECwwEVk9J
UDEPMA0GA1UEAwwGU0hBS0VOMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6d6M
01nUoOV+S35u/z3+lvrjOew+vvMmOc2zG5a7agY7ThmPD3qtFpiU0QysKYiXCfcf
jzEajMzY8mf3R++rraMaMBgwFgYIKwYBBQUHARoECjAIoAYWBDEwMDQwCgYIKoZI
zj0EAwIDSQAwRgIhAL4Ry3oKOOkJziD7emgqqmut/Gx/fWp5IPxFdM3wkmt0AiEA
+zEd5RHO02KJHptfsvD3WwHmXXctGh0xXb7ju6Khtjg=
-----END CERTIFICATE-----";
}

route [FUTURE_CERT] {
	$var(cert) = "-----BEGIN CERTIFICATE-----
MIIByzCCAXGgAwIBAgIUVE3Rsda/WIXDxnUlSq2hfueiStAwCgYIKoZIzj0EAwIw
RTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNjAxMDEwMDAyMTJaFw0yODA0MDUw
MDAyMTJaMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJWQTESMBAGA1UEBwwJU29t
ZXdoZXJlMRowGAYDVQQKDBFBY21lVGVsZWNvbSwgSW5jLjENMAsGA1UECwwEVk9J
UDEPMA0GA1UEAwwGU0hBS0VOMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6d6M
01nUoOV+S35u/z3+lvrjOew+vvMmOc2zG5a7agY7ThmPD3qtFpiU0QysKYiXCfcf
jzEajMzY8mf3R++rraMaMBgwFgYIKwYBBQUHARoECjAIoAYWBDEwMDQwCgYIKoZI
zj0EAwIDSAAwRQIhAOxYJS2CFgFXDA7Splhu7WXafkEm9TrmNEItzu8mfL1DAiBm
wdgmH2RxGpgEjLw7b6i78Bo4YURv8vN9XF8ImFVQkA==
-----END CERTIFICATE-----";
}

route [UNKNOWN_CERT] {
	$var(cert) = "-----BEGIN CERTIFICATE-----
MIIByzCCAXGgAwIBAgIUXtaSLz3PT6b3R82g+0+lmQQlHfYwCgYIKoZIzj0EAwIw
RTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMTA0MTMwMDA4NTlaFw0yMzA3MTcw
MDA4NTlaMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJWQTESMBAGA1UEBwwJU29t
ZXdoZXJlMRowGAYDVQQKDBFBY21lVGVsZWNvbSwgSW5jLjENMAsGA1UECwwEVk9J
UDEPMA0GA1UEAwwGU0hBS0VOMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaSRx
apeMZxGMWCif9d8iasnPcOEc58+MiAsTKfxgZUjyZznfevpogWoQc6/0aN/96aKe
cK4zJT3s3D/PMdnI26MaMBgwFgYIKwYBBQUHARoECjAIoAYWBDEwMDQwCgYIKoZI
zj0EAwIDSAAwRQIgUESIkBFvkPCp0VEUsUWhurSumgIiw7tzSPKrkrgTjYgCIQD7
zO1Kfbrufjuc0DmHnevhFJNEojzwX2cD7QUVA8/9WQ==
-----END CERTIFICATE-----";
}


# BSD 2-Clause License
#
# Copyright (c) 2021, OpenSIPIt
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

log_level = 3
log_stderror = yes
log_facility = LOG_LOCAL0

memdump = 2
udp_workers = 1

auto_aliases = no

#socket = udp:MY_IP:5060
socket = udp:MY_IP:5090
socket = udp:MY_IP:5091
socket = udp:MY_IP:5092
socket = udp:MY_IP:5093
socket = udp:MY_IP:5094
socket = udp:MY_IP:5095
socket = udp:MY_IP:5096
socket = udp:MY_IP:5097
socket = udp:MY_IP:5098

socket = udp:MY_IP:5099
socket = udp:MY_IP:5100
socket = udp:MY_IP:5101
socket = udp:MY_IP:5102
socket = udp:MY_IP:5103
socket = udp:MY_IP:5104
socket = udp:MY_IP:5105
socket = udp:MY_IP:5106
socket = udp:MY_IP:5107

socket = udp:MY_IP:5108
socket = udp:MY_IP:5109
socket = udp:MY_IP:5110
socket = udp:MY_IP:5111
socket = udp:MY_IP:5112
socket = udp:MY_IP:5113
socket = udp:MY_IP:5114
socket = udp:MY_IP:5115
socket = udp:MY_IP:5116

socket = udp:MY_IP:5117
socket = udp:MY_IP:5118
socket = udp:MY_IP:5119
socket = udp:MY_IP:5120
socket = udp:MY_IP:5121
socket = udp:MY_IP:5122
socket = udp:MY_IP:5123
socket = udp:MY_IP:5124
socket = udp:MY_IP:5125

socket = udp:MY_IP:5126
socket = udp:MY_IP:5127
socket = udp:MY_IP:5128
socket = udp:MY_IP:5129
socket = udp:MY_IP:5130
socket = udp:MY_IP:5131
socket = udp:MY_IP:5132
socket = udp:MY_IP:5133
socket = udp:MY_IP:5134

socket = hep_udp:MY_IP
#alias = udp:opensipit.org:5060
alias = udp:opensipit.org:5090

####### Modules Section ########

mpath = "modules/"

loadmodule "signaling.so"
loadmodule "statistics.so"
loadmodule "sl.so"

loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

loadmodule "rr.so"

loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/var/run/opensips/opensips_fifo_auth")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "registrar.so"
loadmodule "usrloc.so"

loadmodule "httpd.so"
loadmodule "mi_http.so"

loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "options_ping_interval", 50)

loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

loadmodule "proto_hep.so"
modparam("proto_hep", "hep_id",
    "[homer] 172.31.17.16:9063; transport=udp; version=3")
modparam("proto_hep", "hep_capture_id", 4000)

loadmodule "tracer.so"
modparam("tracer", "trace_on", 1)
modparam("tracer", "trace_id", "[tid]uri=hep:homer")

loadmodule "db_mysql.so"
loadmodule "auth.so"
modparam("auth", "username_spec", "$var(username)")
modparam("auth", "password_spec", "$var(password)")
modparam("auth", "calculate_ha1", 1)

route {
	if (!mf_process_maxfwd_header(10)) {
		sl_send_reply(483, "Too Many Hops");
		exit;
	}

	if (has_totag())
		route(mid_dialog_request);

	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("[$ci] Attempt to route with preloaded Routes [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply(403, "Preloaded Route Denied");
		exit;
	}

	t_newtran();
	trace("tid", "t");

	if (!is_method("INVITE|REGISTER")) {
		send_reply(405, "Method Not Allowed");
		exit;
	}

	$var(username) = "opensipit02";
	$var(password) = "cqFTs3NXsdKDW1hiL7KRWyMU2GqDQSaFoXyVJHFz";

	if (!pv_www_authorize("opensipit.org")) {
		$var(port) = $socket_in(port);

		if ($var(port) >= 5090 and $var(port) <= 5098)
			$var(qop) = "auth";
		else if ($var(port) >= 5099 and $var(port) <= 5107) {
			$var(qop) = "auth-int"; 
			$var(port) -= 9;
		} else if ($var(port) >= 5108 and $var(port) <= 5116) {
			$var(qop) = "auth,auth-int";
			$var(port) -= 18;
		} else if ($var(port) >= 5117 and $var(port) <= 5125) {
			$var(qop) = "auth-int,auth";
			$var(port) -= 27;
		} else if ($var(port) >= 5126 and $var(port) <= 5134) {
			$var(qop) = NULL;
			$var(port) -= 36;
		} else {
			$var(qop) = "auth";
			$var(port) = 5090;
		}

		xlog("on $socket_in(port), we have: $var(port) / $var(qop)\n");

		if ($var(qop) != NULL) {
			switch ($var(port)) {
			case 5090:
				www_challenge("opensipit.org", $var(qop), "MD5,SHA-256,SHA-512-256");
				break;

			case 5091:
				www_challenge("opensipit.org", $var(qop), "MD5,SHA-256");
				break;

			case 5092:
				www_challenge("opensipit.org", $var(qop), "MD5");
				break;

			case 5093:
				www_challenge("opensipit.org", $var(qop), "MD5-sess");
				break;

			case 5094:
				www_challenge("opensipit.org", $var(qop), "MD5-sess,SHA-256-sess");
				break;

			case 5095:
				www_challenge("opensipit.org", $var(qop), "MD5-sess,SHA-256-sess,SHA-512-256-sess");
				break;

			case 5096:
				www_challenge("opensipit.org", $var(qop), "SHA-256");
				break;

			case 5097:
				www_challenge("opensipit.org", $var(qop), "SHA-512-256");
				break;

			case 5098:
				www_challenge("opensipit.org", $var(qop), "SHA-256,SHA-512-256");
				break;
			}
		} else {
			xlog("trying to include no QoP! (might not be possible anymore)\n");

			switch ($var(port)) {
			case 5090:
				www_challenge("opensipit.org", , "MD5,SHA-256,SHA-512-256");
				break;

			case 5091:
				www_challenge("opensipit.org", , "MD5,SHA-256");
				break;

			case 5092:
				www_challenge("opensipit.org", , "MD5");
				break;

			case 5093:
				www_challenge("opensipit.org", , "MD5-sess");
				break;

			case 5094:
				www_challenge("opensipit.org", , "MD5-sess,SHA-256-sess");
				break;

			case 5095:
				www_challenge("opensipit.org", , "MD5-sess,SHA-256-sess,SHA-512-256-sess");
				break;

			case 5096:
				www_challenge("opensipit.org", , "SHA-256");
				break;

			case 5097:
				www_challenge("opensipit.org", , "SHA-512-256");
				break;

			case 5098:
				www_challenge("opensipit.org", , "SHA-256,SHA-512-256");
				break;
			}
		}
	}

	#if (!pv_www_authorize("opensipit.org")) {
	#       www_challenge("opensipit.org");
	#	exit;
	#}

	xlog("XXXXXXXXXXXXX SUCCESSSSSSSSSS\n");

	if (is_method("REGISTER"))
		save("location");
	else
		send_reply(486, "AUTH SUCCESSFUL");

	exit;
}

failure_route [missed_call] {
	if (t_was_cancelled()) {
		exit;
	}
}

route [mid_dialog_request]
{
	# handle hop-by-hop ACK (no routing required)
	if ( is_method("ACK") && t_check_trans() ) {
	    t_relay();
	    exit;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if ( !loose_route() ) {
	    # we do record-routing for all our traffic, so we should not
	    # receive any sequential requests without Route hdr.
	    send_reply(404,"Not here");
	    exit;
	}

	if (is_method("BYE")) {
	    # do accounting even if the transaction fails
	    do_accounting("log","failed");
	}

	# route it out to whatever destination was set by loose_route()
	# in $du (destination URI).
	t_relay();
	exit;
}
